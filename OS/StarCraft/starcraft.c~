/*
--------------------
Julian Stoev 11B grade #29
Starcraft 3 beta:) design
--------------------
*/

/*
znam zashto dava segmentation fault no nqma vreme da go opravq :(
*/

#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>

int minerals = 5000;
int acq_minerals = 0;
int workers = 5;
int soldiers = 0;
int centers = 1;

pthread_mutex_t min_mutex;
pthread_mutex_t sol_mutex;
pthread_mutex_t wor_mutex;
pthread_mutex_t cen_mutex[12]; //5000 max min / 400 per center = 12 max
pthread_mutex_t cen_val_mutex;
void work(void *w){
  int i;
  int id = (int)w;
  while((minerals>0)&&(soldiers<20)){ //change here too !!!
    printf("SCV %d is mining\n", id+1);
    pthread_mutex_lock(&min_mutex);
      minerals -= 8;
    pthread_mutex_unlock(&min_mutex);
    printf("SCV %d is transporting minerals\n", id+1);
    sleep(2);
    int flag = 0;
    while(!flag){
      for(i = 0; i < centers; i++){
        if (pthread_mutex_trylock(&cen_mutex[i]) == 0){
          flag = 1;
          acq_minerals += 8;
          pthread_mutex_unlock(&cen_mutex[i]);
          printf("SCV %d delivered minerals to Command center %d\n", id+1, i+1);
          break;
        }
      }
      if(flag == 0){
        sleep(1);
      }
    }
  }
}

void create_soldier(){
  pthread_mutex_lock(&min_mutex);
  acq_minerals -= 50;
  pthread_mutex_unlock(&min_mutex);
  pthread_mutex_lock(&sol_mutex);
  soldiers += 1;
  pthread_mutex_unlock(&sol_mutex);
  printf("You want a piece of me, boy?\n");
}

void create_center(){
  sleep(2);
  pthread_mutex_lock(&min_mutex);
  acq_minerals-=400;
  pthread_mutex_unlock(&min_mutex);
  pthread_mutex_lock(&cen_val_mutex);
  centers+=1;
  pthread_mutex_unlock(&cen_val_mutex);
  printf("Command center %d created\n", centers);
}

void create_worker(){
  sleep(1);
  pthread_t worker;
  if(pthread_create(&worker, NULL, work, (void*)workers)){
    perror("Error while creating worker");
  }
  pthread_mutex_lock(&min_mutex);
  acq_minerals -= 50;
  pthread_mutex_unlock(&min_mutex);
  pthread_mutex_lock(&wor_mutex);
  workers+=1;
  pthread_mutex_unlock(&wor_mutex);
  printf("SCV good to go, sir.");
}

int main(){
  int i;
  pthread_mutex_init(&min_mutex, NULL);
  pthread_mutex_init(&sol_mutex, NULL);
  pthread_mutex_init(&wor_mutex, NULL);
  for(i = 0; i < 12; i++){
      pthread_mutex_init(&cen_mutex[i], NULL);
  }
  pthread_mutex_init(&cen_val_mutex, NULL);
  pthread_t worker_threads[200]; //max possible workers by the rules
  for(i = 0; i < workers; i++){
      if(pthread_create(&worker_threads[i], NULL, work, (void*)i)){
        perror("Error while creating worker");
      }
  }
  while((soldiers<20)&&(minerals>0)){
    char s;
    scanf("%s", &s);
    switch (s) {
      case 'm':
        if (acq_minerals < 50){
          printf("Not enough minerals\n");
        } else {
          pthread_t create_sol;
          if(pthread_create(&create_sol, NULL, create_soldier, NULL)){
            perror("Error while creating soldier");
          }
          sleep(1);
          /*
          The sleep() is outside due to the fact that soldier var could
          be incremented after this loop has entered another cycle
          which means std in would be waitng for value while the tread would
          have finished working
          */
        }
        break;
      case 's':
        if (acq_minerals < 50){
          printf("Not enough minerals\n");
        } else {
            pthread_t create_wor;
          if(pthread_create(&create_wor, NULL, create_worker, NULL)){
            perror("Error while creating worker");
          }
        }
        break;
      case 'c':
        if (acq_minerals < 400){
          printf("Not enough minerals\n");
        } else {
            pthread_t create_cen;
          if(pthread_create(&create_cen, NULL, create_center, NULL)){
            perror("Error while creating center");
          }
        }
        break;
      default:
      printf("No such command\n");
    }
  }
  for(i = 0; i < workers; i++){
    pthread_join(worker_threads[i], NULL);
  };
  acq_minerals = soldiers*50 + (workers-5)*50 + (centers-1)*400 + acq_minerals; // Otherwise wont count the used resources
  printf("Starting minerals: 5000\n");
  printf("Remaining minerals: %d\n", minerals);
  printf("Collected minerals: %d\n", acq_minerals);
  pthread_mutex_destroy(&min_mutex);
  pthread_mutex_destroy(&sol_mutex);
  pthread_mutex_destroy(&wor_mutex);
  for(i = 0; i < 12; i++){
      pthread_mutex_destroy(&cen_mutex[i]);
  }
  pthread_mutex_destroy(&cen_val_mutex);
  return 0;
}
